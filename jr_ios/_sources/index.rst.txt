
CD_WebRTC 多流版本
=====================================

.. toctree::

1. 概述
--------------------------------------

   CD_WebRTC负责给前端网页提供对接会议服务和相应媒体转码功能的服务。
   
   原先单流版本的CD_WebRTC将所有的视频流混合成一股流发送给前端，前端只能通过有限的几个接口进行控制，大部分媒体的控制和展现逻辑由CD_WebRTC完成。
   
   而多流版本则取消了媒体混流的逻辑，将各个媒体流单独发送给前端，并由前端来控制媒体流，CD_WebRTC负责转发媒体控制指令，大大增强了前端的自主控制权限。


2. 架构说明
--------------------------------------

.. image:: architecture.png

3. 工作模式
--------------------------------------
* 3.1 单流工作模式
   #. 前端通过WebRTCGateway与CD_WebRTC进行信令通讯,登陆和加入会议。
   #. 前端创建WebRTC和CD_WebRTC之间建立媒体通道，用于传输媒体和自定义数据。
   #. 有新成员加入，会议服务通知CD_WebRTC。
   #. CD_WebRTC根据前端设置的布局模式计算分辨率，对媒体进行订阅，同时会将相应人员变动消息通知给前端。
   #. CD_WebRTC将订阅的媒体进行混流，合并成一股媒体流，通过WebRTC媒体通道发送给前端进行显示。


* 3.2 多流工作模式
   #. 前端通过WebRTCGateway与CD_WebRTC进行信令通讯,登陆和加入会议。
   #. 前端创建WebRTC和CD_WebRTC之间建立媒体通道，用于传输媒体和自定义数据。
   #. 有新成员加入，会议服务通知CD_WebRTC。
   #. CD_WebRTC将人员变动信息和媒体信息发送给前端。
   #. 前端将媒体信息通知给对接客户，由客户指定需要订阅的媒体分辨率。
   #. 客户将媒体订阅信息发送给前端。
   #. 前端接收到客户的订阅信息，解析之后发送给CD_WebRTC。
   #. CD_WebRTC接收到订阅信息，正式向会议服务订阅媒体。
   #. CD_WebRTC将收到的媒体数据通过WebRTC媒体通道发送给前端进行显示


4. 主要流程
--------------------------------------

4.1 登陆和入会流程
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. uml::

   skinparam monochrome true
   box 前端
      participant Web as web
      participant WebRTC as webrtc
   end box
   box 多方会议服务
      participant WebRTCGetWay as webrtcgetway
      participant JMDS as jmds
      participant CD_WebRTC as cd_webrtc
      participant JSMS as jsms
   end box

   == 登陆 ==
   web -> webrtcgetway: 发送登陆请求
   webrtcgetway -> jmds: 对请求进行转换\n并转发给JMDS
   jmds -> cd_webrtc: JMDS根据需求在独立进程上\n创建CD_WebRTC负责与web进行对接
   cd_webrtc -> jsms: 查询并验证用户信息
   jsms -> cd_webrtc: 返回结果
   cd_webrtc -> webrtcgetway: 发送登陆结果
   webrtcgetway -> web: 转换请求并转发

   == 入会 ==
   web -> webrtcgetway: 发送入会请求
   webrtcgetway -> cd_webrtc: 对请求进行转换\n并转发请求
   cd_webrtc -> jsms: 加入会议
   jsms -> cd_webrtc: 返回结果
   cd_webrtc -> webrtcgetway: 发送结果
   webrtcgetway -> web: 转换请求并转发
   web -> webrtc: 创建webrtc\n并和CD_WebRTC建立媒体通道


4.2 单流模式媒体订阅流程
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. uml::

   skinparam monochrome true
   box 前端
      participant Web as web
      participant WebRTC as webrtc
   end box
   box 多方会议服务
      participant CD_WebRTC as cd_webrtc
      participant JSMS as jsms
   end box

   == 有新成员加入 ==
   jsms -> cd_webrtc: 通知CD_WebRTC有新成员加入
   cd_webrtc -> jsms: 根据设置的参数调整各个媒体流的分辨率
   cd_webrtc -> web: 发送成员加入通知
   loop 周期性执行
      jsms -> cd_webrtc: 发送媒体资源
      cd_webrtc -> webrtc: 对媒体资源进行转码
      webrtc -> web: 将媒体资源发送给前端
   end


4.3 多流模式媒体订阅流程
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   
   .. uml::
   
      skinparam monochrome true
      box 前端
         participant 用户 as user
         participant Web as web
         participant WebRTC as webrtc
      end box
      box 多方会议服务
         participant CD_WebRTC as cd_webrtc
         participant JSMS as jsms
      end box
   
      == 有新成员加入 ==
      jsms -> cd_webrtc: 通知CD_WebRTC有新成员加入
      cd_webrtc -> web: 发送成员加入信息和对应的媒体信息
      note over web: onmedianotiy反馈消息\n进行通知
      web -> user: 通知客户进行设置
      user -> web: 发送设置通知
      web -> cd_webrtc: 发送媒体设置信息给CD_WebRTC
      note over cd_webrtc: setmediainfo接口\n进行设置
      cd_webrtc -> jsms: 根据设置信息进行媒体订阅
      loop 周期性执行
         jsms -> cd_webrtc: 发送媒体资源
         cd_webrtc -> webrtc: 对媒体资源进行转码
         webrtc -> web: 将媒体资源发送给前端
      end


5. 接口使用说明
--------------------------------------

5.1 接口调用和命令反馈调用流程
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 接口调用 - 接口调用有两种方法, 一种是使用WebRTCGetWay调用,另一种是借助webrtc的媒体通道调用webrtc的send函数。
   * 使用WebRTCGetWay进行调用::
      
      数据格式: {"txt":text, "type":"msg"}
      // text: 符合协议格式的字符串，以下有说明
      // msg: 固定的数据类型字符串

   * 借助webrtc的媒体通道调用webrtc的send函数::

      send(text, peer);
      peer: 可选的对端 Id,http 连接时被忽略
      text: 符合协议格式的字符串,以下有说明。
   
   协议格式 - BASE64 编码的 JSON 格式::

      {"cmd":cmd, "param":...}
      //cmd 为指令，... 为包含相应参数的json字符串

* 信息反馈 - 调用webrtc的onmessage函数接收信息反馈::
  
   onmessage(text, peer);
   // text json数据字符串, 格式为{"cmd":interface, "val":...};interface 为对应的指令,...为对应的数据
   // peer 对端 Id
  

5.2 单流版本接口
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* queryroom - 查询房间是否存在::
  
   {"cmd":"queryroom", "param":{"roomid":%s}}
   roomid 房间号

   返回: {"cmd":"queryroom", "val":%d} // val:0 - 失败, 1 - 成功

* joinroom - 加入房间::

   {"cmd":"joinroom", "param":{"regionId":%d, "roomId":%s, "displayname":%s, "param":%s}}
   regionId 域id
   roomId 房间号
   displayname 显示名称
   bVideo 是否现实视频
   param 媒体设置参数

   返回: {"cmd":"joinroom", "val":%d} // val:0 - 失败, 1 - 成功
  
* leaveroom - 离开会议::

   {"cmd":"leaveroom", "param":{"confId":%d}}
   confId 会议id

   返回: {"cmd":"leaveroom", "val":%d} // val:0 - 失败, 1 - 成功

* getrealm - 获取区域信息::

   {"cmd":"getrealm", "param":{"confId":%d}}
   confId 会议id

   返回: 成功 - {"cmd":"ongetrealmok", "val":%s} // val:区域信息
        失败 - {"cmd":"ongetrealmfail", "val":0}
* uesendonline - 发送Online信息::

   {"cmd":"uesendonline", "param":{"content":%s, "target":%s}}
   content 消息内容
   target 目标用户uri

   返回: {"cmd":"uesendonline", "val":%d} // val:0 - 失败, 1 - 成功
* setpushuri uri - 设置推流地址，设置推流地址. 若以'/'结尾, 则自动添加当前会议号，必须在开始“视频混合”前设置::
   
   {"cmd":"setpushuri", "param":{"uri":%s}}
   uri 推流地址，例:rtmp://jusmeeting3.8686c.com/jusmeeting/test

   返回: {"cmd":"setpushuri", "val":%d} // val:0 - 失败, 1 - 成功 
* startpush -  开始向 CDN 推流::

   {"cmd":"startpush", "param":{}}

   返回: {"cmd":"startpush", "val":%d} // val:0 - 失败, 1 - 成功
* stoppush - 停止推流::

   {"cmd":"stoppush", "param":{}}

   返回: {"cmd":"stoppush", "val":%d} // val:0 - 失败, 1 - 成功
* getstats - 反馈实时统计, 字符串以'\r\n'开头::

   {"cmd":"getstats", "param":{}}

* help - 反馈帮助信息, 字符串以'\r\n'开头::

   {"cmd":"help", "param":{}}

* rec - 开始录制，东莞移动项目中，由排队机发送该指令，实现录制功能。此方法已废弃, 使用 startrecord 代替::
  
   {"cmd":"rec", "param":{"recFile":%s}}
   recFile 文件服务器上的 URL,  不是本地文件路径。例如 //group1/fdafa/212.mp4
* stoprec - 对应rec的, 停止录制并上传，东莞移动项目中，由排队机发送该指令，结束并上传的文件服务器::
  
   {"cmd":"stoprec", "param":{"expire":%d}}
   expire 文件服务器删除该文件的过期时间, 单位秒, 默认为1年
* startrecord - 开始录制命令,默认使用qiniu的服务，录制后文件会上传到qiniu云（保留原来的数据格式）::

   {"cmd":"StartRecord","Video":true,"Storage":{
   "Protocol":"qiniu",//协议
   "AccessKey":"Th2jW_jP5VSk-wfdVMy5it1oK4iHa8pv8vBZMhbd",//qiniu sdk需要的信息
   "SecretKey":"Nh-_pgXrx9weiq8bkAtJPkrBlV3YP13U0Fx0fT-c",//qiniu sdk需要的信息
   "BucketName":"ajianzheng",//qiniu sdk需要的信息
   "FileKey":"1234.mp4",//上传文件相关的key
   "SplitFileSize":100}//分割文件的大小，单位Kb，不传的话默认500Mb
   }
   目前录制都是会自动分割的模式，生成文件达到SplitFileSize指定的大小是就会重新写一个新的文件，而文件名的生成与FileKey有关，不如FileKey为"1234.mp4",最终上传qiniu后会是"1234_0000.mp4","1234_0001.mp4","1234_0002.mp4"...这样形式的文件
* stoprecord - 对应startrecord的,  停止录制::
  
   {"cmd":"stoprecord", "param":{}}
   录制结束后，文件的上传是由StorageTransfer服务完成的，服务会定期检查record目录下是否有info文件，并根据info文件的内容进行上传

* setvideolevel - 设置混合视频的尺寸， 必须在开始视频混合前设置， 与setmerge有重复, 建议使用setmerge代替::
  
   {"cmd":"setvideolevel", "param":{"MtcConfVideoLevelKey":%d}}
   MtcConfVideoLevelKey 视频尺寸,由小到大可选值
      256 minial picture
      512 small picture
      768 large picture
      1024 maxium picture
* setrole - 设置角色::
  
   {"cmd":"setrole","param":{"mask":%d, "role":%d, "target":%s}}
   mask 掩码,表示操作的bit位
   role 角色,按位解释,设原状态为_ROLE_, 
               _ROLE_ = (_ROLE_ & ~mask) | (mask & role);
   target  可选的设置对象.缺省时为自身
* setstate - 设置会场成员的状态::
  
   {"cmd":"setstate","param":{"mask":%d, "state":%d, "target":%s}}
   mask  掩码,表示操作的bit位
   state 状态,按位解释，设原状态为_STATE_, 则
               _STATE_ = (_STATE_ & ~mask) | (mask & state);
   target  可选的设置对象.缺省时为自身
* setnick - 设置会场成员的昵称::
  
   {"cmd":"setnick", "param":{"nick":%s, "target":%s}}
   nick utf8编码的昵称
   target 可选的设置对象.缺省时为自身
* settitle - 修改会场标题::
  
   {"cmd":"settitle","param":{"title":%s}}
   title utf8编码的标题
* sendtext - 向会场内成员,发送聊天文本::
  
   {"cmd":"sendtext","param":{text:%s, target:%s}}
   text utf8编码的文本
   target 可选的目标对象.缺省时将广播
* publish - 向第三方平台 (WEBRTC) 发送视频::
  
   {"cmd":"publish", "param":{"video":%d}}
   video 0 - 表示发送, 1 - 表示发送
* subscribe - 第三方平台, 订阅会场内的事件,将会场事件分三类,相应的反馈格式同上:{"cmd":cmd, "val":...}::
  
   {"cmd":"subscribe", "param":{"mask":%d}}
   mask 事件位集合
   0x1 自身状态改变, 对应cmd值为 onselfstate
   0x2 其他成员状态改变, 对应cmd值为 onactorstate/onactorleave
   0x4 会场属性改变, 对应cmd值为 onconfstate
   0x8 收到的聊天信息, 对应cmd值为 onconfchat
* vsubscribe - 订阅视频::
  
   {"cmd":"vsubscribe","param":{"target":%s, "state":%d}}
   target 订阅对象
   state  0 - 表示不订阅, 1 - 订阅视频
* setmerge - 设置视频混合参数, 必须在开始视频混合前设置::
  
   {"cmd":"setMerge", "param":{"videoLevel":%x, "mergeMode":%d, "mergeFps":%d}}
   videoLevel 视频尺寸,由小到大可选值
         256 minial picture
         512 small picture
         768 large picture
         1024 maxium picture
   mergeMode 模式值,范围[1,5],参考setmergemode的模式定义
   mergeFps 混合后视频帧速率,通常不能超过30
* setmergemode - 设置视频混合模式, 支持如下几种::
  
   {"cmd":"setMergeMode", "param":{"mergeMode":%d}}
   mergeMode 模式值,范围[1,5]
     1. 平铺模式,所有视频均分平铺
     2. 讲台模式,共享为大图,其他视频为小图
     3. 演讲模式,共享为大图,共享者视频为小图,其他不显示
     4. 自定义模式,由 setlayout 指令设置所有视频布局
     5. 智能模式, 可用 setmergemode_i, setmerge_i 调整相应的参数
* setmergemode_i - 智能布局中的智能模式, setmergemode 必须设置为 ***智能模式(5)***::

   {"cmd":"setMergeMode_i", "param":{"mergeMode":%d, "scsMergeMode":%d, "zoomUserName":%s}}
   mergeMode 智能分屏模式
      1 freeLayout
      2 rectLayout
      3 bigSmallX2
      4 bigSmallX3
      ....,
      11 bigSmallX10
      12 bigSmallTop
      13 bigSmallBottom
   scsMergeMode 智能分屏带屏幕共享模式
      1 screen
      2 platform
      3 platformCover
      4 speaker
   zoomUserName 大小屏默认放大的用户 uri
* setmerge_i - 智能布局参数, setmergemode必须设置为 ***智能模式(5)***::
  
   {"cmd":"setMerge_i", "param":{"videoWidth":%d, "videoHeight":%d, "mergeMode":%d, "scsMergeMode":%d, "mergeFps":%d, "zoomUserName":%s}}
   videoWidth: 宽
   videoHeight
   mergeMode: 智能分屏模式 参见上方 setmergemode_i
   scsMergeMode：智能分屏带屏幕共享模式，参见上方 setmergemode_iv
   mergeFps: 帧数 1-30
   zoomUserName: 大小屏默认放大的用户 uri
* setlayout - 自定义布局, setmergemode 必须设置为 ***自定义模式(4)***, 可以自由定义,每个成员视频在单位画布中的位置::

   {"cmd":"setLayout", "param":{"layout":[[<id0>,<ps> x, y, w, h],["id1",256, 0.1, 0.1, 1.0, 1.0], ...}}
   id0 成员 URI 或屏幕 URI
   ps  视频尺寸，由小到大分别为
         256 minial picture
         512 small picture
         768 large picture
         1024 maxium picture
   x,y,w,h 单位 [0.0,1.0] 的坐标和尺寸


5.3 多流版本接口情况
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*** 被取消的接口 ***

* setvideolevel
* publish
* vsubscribe
* setmerge
* setmerge_i
* setmergemode_i
* setlayout

.. note::

   由于多流版本不对媒体流做混流处理，并且媒体订阅的控制转移到前端，原先设置媒体混流和订阅的接口会被弃用。

*** 新增接口 ***

* onmedianotiy - 媒体变化通知::

   {"cmd":"onmedianotiy", "val":[{"uri":%s, "type":%d},...]}
   uri 媒体流的uri
   type 媒体类型 
      1 - 视频流
      2 - 屏幕共享

.. note::

   onmedianotiy消息会在以下两种情况通知:

   1. 加入会议成功之后反馈当前会议中的已经存在的媒体流，如果当前没有其他人员存在则返回的val为空[]。

   2. 会议开始之后，有人员新增时通知。如果有人员离开CD_WebRTC会自动取消订阅，并由onactorleave进行通知。
   
   
* setmediainfo - 设置媒体订阅::

   {"cmd":"setmediainfo", "param":{"medias":[{"uri":%s, "type":%d, "ps":%x, "fps":%d},...]}}
   uri 媒体流的uri，由onmedianotiy传入
   type 媒体类型，由onmedianotiy传入
      1 视频流
      2 屏幕共享 
   ps 需要的视频尺寸
      0   取消订阅
      256 minial picture
      512 small picture
      768 large picture
      1024 maxium picture
   fps 帧率 可选范围[1~30]

.. note::

   setmediainfo设置媒体订阅有以下两种使用场景:

   1. 接收到onmedianotiy消息时，对新增的媒体进行设置订阅。

   2. 会议开始之后，需要更改当前正在显示的媒体，重新对媒体订阅情况进行设置。


*** 媒体订阅使用示例 ***

CD_WebRTC接收到来自jsms的新增媒体时，反馈onmedianotiy消息通知前端，前端调用setmediainfo接口设置媒体订阅。

* 指令反馈::
  
   onmessage(text, peer);
      text - {"cmd":"onmedianotiy", "val":[{"uri":"media_uri_1", "type":1}, {"uri":"media_uri_2", "type":1}]}

* 设置媒体订阅::
  
   send(text, peer);
      text - "{"cmd":"setmediainfo", "param":{"medias":[{"uri":"media_uri_1", "type":1, "ps":256, "fps":30}, {"uri":"media_uri_2", "type":1, "ps":256, "fps":30}]}}"


6. 透传版本说明
--------------------------------------
单流和多流版本的媒体流都需要在CD_WebRTC经过一次编解码，webrtc也需要一次编解码才能在前端进行显示。
透传就是不在CD_WebRTC端进行编解码，由会议服务到前端只需要在webrtc经过一次编解码过程，降低多路视频情况下的cpu占用。
透传版本理论上不会更改前端使用接口，只在webrtc和CD_WebRTC进行调整。


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

   
